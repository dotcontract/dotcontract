// Generated from ../../../../grammars/Modality.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,33,274,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,
15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,5,26,182,
8,26,10,26,12,26,185,9,26,1,27,1,27,1,27,5,27,190,8,27,10,27,12,27,193,9,
27,1,27,1,27,1,28,1,28,1,28,3,28,200,8,28,1,29,1,29,1,29,1,29,1,29,1,29,
1,30,1,30,1,31,1,31,1,32,3,32,213,8,32,1,32,1,32,1,32,4,32,218,8,32,11,32,
12,32,219,3,32,222,8,32,1,32,3,32,225,8,32,1,33,1,33,1,33,5,33,230,8,33,
10,33,12,33,233,9,33,3,33,235,8,33,1,34,1,34,3,34,239,8,34,1,34,1,34,1,35,
1,35,5,35,245,8,35,10,35,12,35,248,9,35,1,36,1,36,5,36,252,8,36,10,36,12,
36,255,9,36,1,37,4,37,258,8,37,11,37,12,37,259,1,37,1,37,1,38,1,38,1,38,
1,38,5,38,268,8,38,10,38,12,38,271,9,38,1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,
9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,0,59,
0,61,0,63,0,65,29,67,0,69,0,71,30,73,31,75,32,77,33,1,0,14,2,0,65,90,97,
122,4,0,48,57,65,90,95,95,97,122,8,0,34,34,47,47,92,92,98,98,102,102,110,
110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,34,34,92,92,1,0,48,57,
1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,64,64,4,0,47,57,65,90,95,
95,97,122,4,0,46,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,
13,282,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,65,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,
1,0,0,0,3,84,1,0,0,0,5,88,1,0,0,0,7,95,1,0,0,0,9,106,1,0,0,0,11,112,1,0,
0,0,13,117,1,0,0,0,15,123,1,0,0,0,17,127,1,0,0,0,19,130,1,0,0,0,21,134,1,
0,0,0,23,139,1,0,0,0,25,144,1,0,0,0,27,149,1,0,0,0,29,151,1,0,0,0,31,153,
1,0,0,0,33,155,1,0,0,0,35,157,1,0,0,0,37,159,1,0,0,0,39,161,1,0,0,0,41,163,
1,0,0,0,43,165,1,0,0,0,45,167,1,0,0,0,47,169,1,0,0,0,49,171,1,0,0,0,51,175,
1,0,0,0,53,179,1,0,0,0,55,186,1,0,0,0,57,196,1,0,0,0,59,201,1,0,0,0,61,207,
1,0,0,0,63,209,1,0,0,0,65,212,1,0,0,0,67,234,1,0,0,0,69,236,1,0,0,0,71,242,
1,0,0,0,73,249,1,0,0,0,75,257,1,0,0,0,77,263,1,0,0,0,79,80,5,109,0,0,80,
81,5,117,0,0,81,82,5,115,0,0,82,83,5,116,0,0,83,2,1,0,0,0,84,85,5,99,0,0,
85,86,5,97,0,0,86,87,5,110,0,0,87,4,1,0,0,0,88,89,5,97,0,0,89,90,5,108,0,
0,90,91,5,119,0,0,91,92,5,97,0,0,92,93,5,121,0,0,93,94,5,115,0,0,94,6,1,
0,0,0,95,96,5,101,0,0,96,97,5,118,0,0,97,98,5,101,0,0,98,99,5,110,0,0,99,
100,5,116,0,0,100,101,5,117,0,0,101,102,5,97,0,0,102,103,5,108,0,0,103,104,
5,108,0,0,104,105,5,121,0,0,105,8,1,0,0,0,106,107,5,117,0,0,107,108,5,110,
0,0,108,109,5,116,0,0,109,110,5,105,0,0,110,111,5,108,0,0,111,10,1,0,0,0,
112,113,5,116,0,0,113,114,5,114,0,0,114,115,5,117,0,0,115,116,5,101,0,0,
116,12,1,0,0,0,117,118,5,102,0,0,118,119,5,97,0,0,119,120,5,108,0,0,120,
121,5,115,0,0,121,122,5,101,0,0,122,14,1,0,0,0,123,124,5,97,0,0,124,125,
5,110,0,0,125,126,5,100,0,0,126,16,1,0,0,0,127,128,5,111,0,0,128,129,5,114,
0,0,129,18,1,0,0,0,130,131,5,110,0,0,131,132,5,111,0,0,132,133,5,116,0,0,
133,20,1,0,0,0,134,135,5,119,0,0,135,136,5,104,0,0,136,137,5,101,0,0,137,
138,5,110,0,0,138,22,1,0,0,0,139,140,5,97,0,0,140,141,5,108,0,0,141,142,
5,115,0,0,142,143,5,111,0,0,143,24,1,0,0,0,144,145,5,110,0,0,145,146,5,101,
0,0,146,147,5,120,0,0,147,148,5,116,0,0,148,26,1,0,0,0,149,150,5,91,0,0,
150,28,1,0,0,0,151,152,5,93,0,0,152,30,1,0,0,0,153,154,5,60,0,0,154,32,1,
0,0,0,155,156,5,62,0,0,156,34,1,0,0,0,157,158,5,40,0,0,158,36,1,0,0,0,159,
160,5,41,0,0,160,38,1,0,0,0,161,162,5,42,0,0,162,40,1,0,0,0,163,164,5,44,
0,0,164,42,1,0,0,0,165,166,5,43,0,0,166,44,1,0,0,0,167,168,5,45,0,0,168,
46,1,0,0,0,169,170,5,63,0,0,170,48,1,0,0,0,171,172,5,108,0,0,172,173,5,102,
0,0,173,174,5,112,0,0,174,50,1,0,0,0,175,176,5,103,0,0,176,177,5,102,0,0,
177,178,5,112,0,0,178,52,1,0,0,0,179,183,7,0,0,0,180,182,7,1,0,0,181,180,
1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,54,1,0,0,0,185,
183,1,0,0,0,186,191,5,34,0,0,187,190,3,57,28,0,188,190,3,63,31,0,189,187,
1,0,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,
192,194,1,0,0,0,193,191,1,0,0,0,194,195,5,34,0,0,195,56,1,0,0,0,196,199,
5,92,0,0,197,200,7,2,0,0,198,200,3,59,29,0,199,197,1,0,0,0,199,198,1,0,0,
0,200,58,1,0,0,0,201,202,5,117,0,0,202,203,3,61,30,0,203,204,3,61,30,0,204,
205,3,61,30,0,205,206,3,61,30,0,206,60,1,0,0,0,207,208,7,3,0,0,208,62,1,
0,0,0,209,210,8,4,0,0,210,64,1,0,0,0,211,213,5,45,0,0,212,211,1,0,0,0,212,
213,1,0,0,0,213,214,1,0,0,0,214,221,3,67,33,0,215,217,5,46,0,0,216,218,7,
5,0,0,217,216,1,0,0,0,218,219,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,
222,1,0,0,0,221,215,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,225,3,69,
34,0,224,223,1,0,0,0,224,225,1,0,0,0,225,66,1,0,0,0,226,235,5,48,0,0,227,
231,7,6,0,0,228,230,7,5,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,
0,0,231,232,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,234,226,1,0,0,0,234,
227,1,0,0,0,235,68,1,0,0,0,236,238,7,7,0,0,237,239,7,8,0,0,238,237,1,0,0,
0,238,239,1,0,0,0,239,240,1,0,0,0,240,241,3,67,33,0,241,70,1,0,0,0,242,246,
7,9,0,0,243,245,7,1,0,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,
246,247,1,0,0,0,247,72,1,0,0,0,248,246,1,0,0,0,249,253,7,10,0,0,250,252,
7,11,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,
254,74,1,0,0,0,255,253,1,0,0,0,256,258,7,12,0,0,257,256,1,0,0,0,258,259,
1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,6,37,0,0,
262,76,1,0,0,0,263,264,5,47,0,0,264,265,5,47,0,0,265,269,1,0,0,0,266,268,
8,13,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,
270,272,1,0,0,0,271,269,1,0,0,0,272,273,6,38,0,0,273,78,1,0,0,0,16,0,183,
189,191,199,212,219,221,224,231,234,238,246,253,259,269,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ModalityLexer extends antlr4.Lexer {

    static grammarFileName = "Modality.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'must'", "'can'", "'always'", "'eventually'", 
                         "'until'", "'true'", "'false'", "'and'", "'or'", 
                         "'not'", "'when'", "'also'", "'next'", "'['", "']'", 
                         "'<'", "'>'", "'('", "')'", "'*'", "','", "'+'", 
                         "'-'", "'?'", "'lfp'", "'gfp'" ];
	static symbolicNames = [ null, "MUST", "CAN", "ALWAYS", "EVENTUALLY", "UNTIL", 
                          "TRUE", "FALSE", "AND", "OR", "NOT", "WHEN", "ALSO", 
                          "NEXT", "LBOX", "RBOX", "LDIA", "RDIA", "LPAREN", 
                          "RPAREN", "STAR", "COMMA", "PLUS", "MINUS", "QMARK", 
                          "LFP", "GFP", "NAME", "STRING", "NUMBER", "STATE_SET_VARIABLE", 
                          "VARIABLE", "WS", "LINE_COMMENT" ];
	static ruleNames = [ "MUST", "CAN", "ALWAYS", "EVENTUALLY", "UNTIL", "TRUE", 
                      "FALSE", "AND", "OR", "NOT", "WHEN", "ALSO", "NEXT", 
                      "LBOX", "RBOX", "LDIA", "RDIA", "LPAREN", "RPAREN", 
                      "STAR", "COMMA", "PLUS", "MINUS", "QMARK", "LFP", 
                      "GFP", "NAME", "STRING", "ESC", "UNICODE", "HEX", 
                      "SAFECODEPOINT", "NUMBER", "INT", "EXP", "STATE_SET_VARIABLE", 
                      "VARIABLE", "WS", "LINE_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ModalityLexer.EOF = antlr4.Token.EOF;
ModalityLexer.MUST = 1;
ModalityLexer.CAN = 2;
ModalityLexer.ALWAYS = 3;
ModalityLexer.EVENTUALLY = 4;
ModalityLexer.UNTIL = 5;
ModalityLexer.TRUE = 6;
ModalityLexer.FALSE = 7;
ModalityLexer.AND = 8;
ModalityLexer.OR = 9;
ModalityLexer.NOT = 10;
ModalityLexer.WHEN = 11;
ModalityLexer.ALSO = 12;
ModalityLexer.NEXT = 13;
ModalityLexer.LBOX = 14;
ModalityLexer.RBOX = 15;
ModalityLexer.LDIA = 16;
ModalityLexer.RDIA = 17;
ModalityLexer.LPAREN = 18;
ModalityLexer.RPAREN = 19;
ModalityLexer.STAR = 20;
ModalityLexer.COMMA = 21;
ModalityLexer.PLUS = 22;
ModalityLexer.MINUS = 23;
ModalityLexer.QMARK = 24;
ModalityLexer.LFP = 25;
ModalityLexer.GFP = 26;
ModalityLexer.NAME = 27;
ModalityLexer.STRING = 28;
ModalityLexer.NUMBER = 29;
ModalityLexer.STATE_SET_VARIABLE = 30;
ModalityLexer.VARIABLE = 31;
ModalityLexer.WS = 32;
ModalityLexer.LINE_COMMENT = 33;



